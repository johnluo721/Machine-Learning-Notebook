{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 数据圈机器学习第五期入组考核\n",
    "* 考核限时24小时完成。\n",
    "* 请在jupyter notebook中完成以下10道题，并生成pdf/html格式发至邮箱 757723267@qq.com。邮件请标明 「ML考核 微信名 微信昵称」\n",
    "* 每超时1小时，扣15分，以邮件接收时间为准\n",
    "* 每颗★4分，共100分，80分通过考核\n",
    "\n",
    "祝好运！"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Pandas 操作1  (★★)\n",
    "<br/>\n",
    "\n",
    "请对数据集做如下操作，每个操作一个单元\n",
    "1.\t从 https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv 读取csv\n",
    "2.\t得到时常超过200分钟的 Drama 类型电影\n",
    "3.\t得到 Crime 或者 Drama 或者 Action类型电影\n",
    "4.\t得到数据类型为数字（整数或者浮点数）的列"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 从http://bit.ly/imdbratings 读取csv\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 得到时常超过200分钟的 Drama 类型电影\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 得到 Crime 或者 Drama 或者 Action类型电影\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 得到数据类型为数字（整数或者浮点数）的列\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Pandas操作2 (★★)\n",
    "<br/>\n",
    "请对数据集做如下操作，每个操作一个单元\n",
    "1.\t从https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv 读取csv，打印出数据的列名\n",
    "2.\t加入一列，Name，保存所有电影标题全部大写的结果\n",
    "3.\t依据电影content_rating，duration 和 star_rating 进行排序。在content_rating相同时，利用duration排序，如果duration相同，按照star_rating 进行排序。\n",
    "4.\t删除genre列\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 从http://bit.ly/imdbratings 读取csv，打印出数据的列名\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 加入一列，Name，保存所有电影标题全部大写的结果\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 依据电影content_rating，duration 和 star_rating 进行排序。在content_rating相同时，\n",
    "# 利用duration排序，如果duration相同，按照star_rating 进行排序。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 删除genre列\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. 生成随机数 (★)\n",
    "<br/>\n",
    "\n",
    "生成位于区间[100,150] 之间的5个随机浮点数，要保留小数点后3位\n",
    "如：[114.122, 112.642, 148.523, 143.011, 138.000]\n",
    "\n",
    "<br/>\n",
    "`输入`：- <br/>\n",
    "`输出`：包含5个浮点数的列表"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. 密码判断 (★)\n",
    "<br/>\n",
    "\n",
    "写一个def，判断用户输入的密码是否符合要求：\n",
    "1.\t至少含有一个大写字母\n",
    "2.\t至少含有一个小写字母\n",
    "3.\t至少含有一个数字\n",
    "4.\t长度大于6，小于12\n",
    "5.\t至少包含一个以下特殊字符（！@ $）\n",
    "\n",
    "<br/>\n",
    "`输入`：密码字段<br/>\n",
    "`输出`：True / False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. 数组排序1 (★★)\n",
    "<br/>\n",
    "\n",
    "请按照绝对值对数组进行排序：<br/>\n",
    "如：[-20, -5, 10, 15]<br/>\n",
    "排序后：[-5, 10, 15, -20]<br/>\n",
    "\n",
    "<br/>\n",
    "`输入`：数组<br/>\n",
    "`输出`：数组<br/>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. 数组排序2 (★★)\n",
    "<br/>\n",
    "对以下数组进行排序：要求排序优先级 score > name > age。\n",
    "如果分数相同，按照名字排序，如果名字依然相同，按照年龄排序\n",
    "\n",
    "People = [ (‘David’, ‘17’, ‘122’),\n",
    "\t        (‘Mike’, ‘18’, ‘120’),\n",
    "\t        (‘Juno’, ‘18’,’120’),\n",
    "\t        (‘David’, ‘19’, ‘122’),\n",
    "        (‘Juno’, ‘21’, ‘100’)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7. 最长重复(★★★)\n",
    "\n",
    "<br/>\n",
    "假设有一文本字段，由不同的英文字母，标点构成。请找出字母重复次数最多的次数。<br/>\n",
    "\n",
    "如：'aaabbcaaaa'，有 'aaa' 'bb' and 'aaaa' 重复字段，其中'aaaa'最长，输出为4. <br/>\n",
    "注：虽然 a 首先重复了3次，但是中间间隔了其他字母， 所以最长重复为bbc后的aaaa。<br/>\n",
    "\n",
    "<br/>\n",
    "`输入`：一段英文文本<br/>\n",
    "`输出`：最长重复的长度\n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8. 关键字对换(★★★)\n",
    "<br/>\n",
    "\n",
    "假设有一文本字段，将其中的 left 换成right，将right换成left。如果没有则原样返回 <br/>\n",
    "例：(\"left\", \"right\", \"left\", \"stop\") `->` (\"right\", \"left\", \"right\", \"stop\")<br/>\n",
    "\t(\"bright aright\", \"ok\") `->` (\"bleft aleft\", \"ok\")<br/>\n",
    "\t(\"enough\", \"jokes\") `->` (\"enough\", \"jokes\")<br/>\n",
    "\n",
    "<br/>\n",
    "`输入`：元组<br/>\n",
    "`输出`: 数据对换后的元组\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9. 出现最多次的字母 (★★★★)\n",
    "<br/>\n",
    "\n",
    "假设有一文本字段，由不同的英文字母，标点构成。请找出出现次数最多的字母<br/><br/>\n",
    "\n",
    "`要求`：\n",
    "1.\t返回值为小写字母\n",
    "2.\t忽略大小写，如 ‘A’== ‘a’\n",
    "3.\t请勿计算标点，数字，以及空格\n",
    "4.\t如果有2个字母出现的次数相同，按照字母表的顺序排序。如 ‘one’包含‘o’‘n’‘e’各一次，按照字母表顺序返回‘e’\n",
    "\n",
    "<br/>\n",
    "`输入`：一段英文文本<br/>\n",
    "`输出`：出现最多次的字母<br/>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 10.紧急邮件过滤器（★★★★★）\n",
    "<br/>\n",
    "\n",
    "完成一个紧急邮件过滤器：\n",
    "紧急邮件特征(至少满足下面的一项）：\n",
    "1.\t所有字符为大写字母,如 HURRY UP\n",
    "2.\t结尾至少有3个“！”，如 quickly！！！\n",
    "3.\t包含有 “help”或者 “asap”或者 “urgent”其中之一关键字,如 help～，please asap\n",
    "4.\t以及关键字的变形:\n",
    "\n",
    "\n",
    "* a.    以一个或多个 . 分割的 如 a.s.a.p,  H….elp\n",
    "* b.\t以一个或多个 – 分割的 如 u-r-g-gen-t, h-e-l-p\n",
    "* c.\t以一个或多个 ！分割的 如 H！E！L！P\n",
    "* d.\t重复多次的, 如 HEEEELP，ASSSSSAP\n",
    "* e.\t大小写混用的 hEELLLp，A.SaP\n",
    "\n",
    "<br/>\n",
    "`输入`：一个英文邮件主题<br/>\n",
    "`输出`： 紧急邮件 返回True，否则返回 False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
